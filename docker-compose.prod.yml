version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: ossmanager-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: "${POSTGRES_DB:-ossmanager}"
      POSTGRES_USER: "${POSTGRES_USER:-ossuser}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/oss-manager.sql:/docker-entrypoint-initdb.d/oss-manager.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - ossmanager_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ossuser} -d ${POSTGRES_DB:-ossmanager}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  ossmanager:
    # 使用预构建的镜像（从GitHub Actions）
    image: "${ACR_REGISTRY}/ossmanager:latest"
    container_name: ossmanager-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${APP_PORT:-8080}:8080"
    environment:
      # 应用配置
      APP_ENV: prod
      GIN_MODE: release
      
      # JWT配置
      JWT_SECRET_KEY: "${JWT_SECRET_KEY}"
      
      # 数据库配置
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: "${POSTGRES_USER:-ossuser}"
      DB_PASSWORD: "${POSTGRES_PASSWORD}"
      DB_NAME: "${POSTGRES_DB:-ossmanager}"
      DB_SSLMODE: "${DB_SSLMODE:-disable}"
      
      # OSS配置（可选）
      OSS_ACCESS_KEY_ID: "${OSS_ACCESS_KEY_ID:-}"
      OSS_ACCESS_KEY_SECRET: "${OSS_ACCESS_KEY_SECRET:-}"
      OSS_ENDPOINT: "${OSS_ENDPOINT:-}"
      OSS_REGION: "${OSS_REGION:-}"
      OSS_BUCKET: "${OSS_BUCKET:-}"
    volumes:
      - ossmanager_data:/data/oss
      - ossmanager_logs:/app/logs
      - ossmanager_uploads:/app/tmp/uploads
    networks:
      - ossmanager_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
    driver: local
  ossmanager_data:
    driver: local
  ossmanager_logs:
    driver: local
  ossmanager_uploads:
    driver: local

networks:
  ossmanager_network:
    driver: bridge
