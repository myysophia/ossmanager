// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/oss/storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"github.com/ninesun/ossmanager-backend/pkg/models"
)

// MockStorageService is a mock of StorageService interface
type MockStorageService struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceMockRecorder
}

// MockStorageServiceMockRecorder is the mock recorder for MockStorageService
type MockStorageServiceMockRecorder struct {
	mock *MockStorageService
}

// NewMockStorageService creates a new mock instance
func NewMockStorageService(ctrl *gomock.Controller) *MockStorageService {
	mock := &MockStorageService{ctrl: ctrl}
	mock.recorder = &MockStorageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageService) EXPECT() *MockStorageServiceMockRecorder {
	return m.recorder
}

// GetName mocks base method
func (m *MockStorageService) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockStorageServiceMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockStorageService)(nil).GetName))
}

// GetType mocks base method
func (m *MockStorageService) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType
func (mr *MockStorageServiceMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockStorageService)(nil).GetType))
}

// Upload mocks base method
func (m *MockStorageService) Upload(file *models.OSSFile) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload
func (mr *MockStorageServiceMockRecorder) Upload(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockStorageService)(nil).Upload), file)
}

// InitMultipartUpload mocks base method
func (m *MockStorageService) InitMultipartUpload(file *models.OSSFile) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitMultipartUpload", file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitMultipartUpload indicates an expected call of InitMultipartUpload
func (mr *MockStorageServiceMockRecorder) InitMultipartUpload(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitMultipartUpload", reflect.TypeOf((*MockStorageService)(nil).InitMultipartUpload), file)
}

// CompleteMultipartUpload mocks base method
func (m *MockStorageService) CompleteMultipartUpload(file *models.OSSFile) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteMultipartUpload", file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteMultipartUpload indicates an expected call of CompleteMultipartUpload
func (mr *MockStorageServiceMockRecorder) CompleteMultipartUpload(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteMultipartUpload", reflect.TypeOf((*MockStorageService)(nil).CompleteMultipartUpload), file)
}

// AbortMultipartUpload mocks base method
func (m *MockStorageService) AbortMultipartUpload(file *models.OSSFile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortMultipartUpload", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortMultipartUpload indicates an expected call of AbortMultipartUpload
func (mr *MockStorageServiceMockRecorder) AbortMultipartUpload(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortMultipartUpload", reflect.TypeOf((*MockStorageService)(nil).AbortMultipartUpload), file)
}

// GenerateDownloadURL mocks base method
func (m *MockStorageService) GenerateDownloadURL(file *models.OSSFile) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateDownloadURL", file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateDownloadURL indicates an expected call of GenerateDownloadURL
func (mr *MockStorageServiceMockRecorder) GenerateDownloadURL(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDownloadURL", reflect.TypeOf((*MockStorageService)(nil).GenerateDownloadURL), file)
}

// DeleteObject mocks base method
func (m *MockStorageService) DeleteObject(file *models.OSSFile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject
func (mr *MockStorageServiceMockRecorder) DeleteObject(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockStorageService)(nil).DeleteObject), file)
}

// GetObjectInfo mocks base method
func (m *MockStorageService) GetObjectInfo(file *models.OSSFile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectInfo", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetObjectInfo indicates an expected call of GetObjectInfo
func (mr *MockStorageServiceMockRecorder) GetObjectInfo(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectInfo", reflect.TypeOf((*MockStorageService)(nil).GetObjectInfo), file)
} 